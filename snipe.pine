//@version=6
indicator('Sniper Entry Strategy by SamFx', overlay = true)

// Define Timeframe EMAs
ema_15m = ta.ema(close, 50)
ema_5m = ta.ema(close, 20)
ema_1m = ta.ema(close, 10)

// Plot EMAs
plot(ema_15m, color = color.green, title = 'EMA 50')
plot(ema_5m, color = color.yellow, title = 'EMA 20')
plot(ema_1m, color = color.purple, title = 'EMA 10')

// ATR for SL/TP calculation
atr = ta.atr(14)
atrMultiplier = 2
riskReward = 2

// Crossover Conditions
longCondition = ta.crossover(ema_5m, ema_15m)
shortCondition = ta.crossunder(ema_5m, ema_15m)

// Plot Signals
plotshape(series = longCondition, location = location.belowbar, color = color.green, style = shape.labelup, size = size.small, title = 'Buy Signal')
plotshape(series = shortCondition, location = location.abovebar, color = color.red, style = shape.labeldown, size = size.small, title = 'Sell Signal')

// Trade Tracking Variables
var bool inTrade = false // Is there an active trade?
var bool isLong = false // Trade direction (true = long)
var float entry_price = na
var float sl_price = na
var float tp_price = na
var line entry_line = na
var line sl_line = na
var line tp_line = na

// Win/Loss Counters
var int win_count = 0
var int lose_count = 0

// Latest Signal Details
var float latest_entry_price = na
var float latest_tp_price = na
var float latest_sl_price = na
var float latest_probability_tp_hit = na

// ====== Probability Calculation ======
// Trend Strength (EMA Slope)
ema_slope_5m = ta.change(ema_5m)
trend_strength_score = math.abs(ema_slope_5m) / ta.atr(14) * 100 // Normalize by ATR

// Volatility (ATR)
volatility_score = atr / close * 100 // ATR as % of price

// Risk-Reward Ratio
risk_reward_score = riskReward * 20 // Higher RR = higher score

// Volume (Relative to Average Volume)
volume_score = volume / ta.sma(volume, 20) * 100 // Volume relative to 20-period average

// Candlestick Pattern (Bullish/Bearish)
candle_score = 0
if isLong and close > open or not isLong and close < open
    candle_score := 50 // Bullish candle for long, Bearish for short
    candle_score

// Total Probability Score
total_score = trend_strength_score + volatility_score + risk_reward_score + volume_score + candle_score
probability_tp_hit = math.min(total_score / 5, 100) // Cap at 100%

// ====== Trade Entry Logic ======
if (longCondition or shortCondition) and not inTrade
    entry_price := close
    inTrade := true
    isLong := longCondition // Set direction based on trigger

    // Store latest signal details
    latest_entry_price := entry_price
    latest_tp_price := isLong ? entry_price + atr * atrMultiplier * riskReward : entry_price - atr * atrMultiplier * riskReward
    latest_sl_price := isLong ? entry_price - atr * atrMultiplier : entry_price + atr * atrMultiplier
    latest_probability_tp_hit := probability_tp_hit

    // Clear old lines
    line.delete(entry_line)
    line.delete(sl_line)
    line.delete(tp_line)

    // Plot Entry Line (Gray Horizontal Line)
    entry_line := line.new(bar_index, entry_price, bar_index + 1, entry_price, color = color.gray, width = 2, extend = extend.right)
    label.new(bar_index + 1, entry_price, text = 'Entry', color = color.white, textcolor = color.white, size = size.small, style = label.style_none)

    // Set Stop Loss and Take Profit prices
    sl_price := latest_sl_price
    tp_price := latest_tp_price

    // Plot SL Line (Red Dotted Horizontal Line)
    sl_line := line.new(bar_index, sl_price, bar_index + 1, sl_price, color = color.red, style = line.style_dotted, extend = extend.right)
    label.new(bar_index + 1, sl_price, text = 'SL', color = color.white, textcolor = color.white, size = size.small, style = label.style_none)

    // Plot TP Line (Green Dotted Horizontal Line)
    tp_line := line.new(bar_index, tp_price, bar_index + 1, tp_price, color = color.green, style = line.style_dotted, extend = extend.right)
    label.new(bar_index + 1, tp_price, text = 'TP', color = color.white, textcolor = color.white, size = size.small, style = label.style_none)

// ====== Check Exits ======
// Define exit conditions
buy_cross = ta.crossover(ema_5m, ema_1m) // 5-min EMA crossing above 1-min EMA for buy exit
sell_cross = ta.crossunder(ema_5m, ema_1m) // 5-min EMA crossing below 1-min EMA for sell exit

if inTrade
    // Additional Exit Condition (EMA Distance > Threshold and Near Price)
    bool additionalExit = isLong and sell_cross or not isLong and buy_cross

    // Regular Exit Condition (TP or SL Hit)
    bool regularExit = isLong and (close >= tp_price or close <= sl_price) or not isLong and (close <= tp_price or close >= sl_price)

    if regularExit or additionalExit
        // Count wins/losses
        if isLong and close >= tp_price or not isLong and close <= tp_price
            win_count := win_count + 1
            win_count
        else
            lose_count := lose_count + 1
            lose_count

        // Reset trade state
        inTrade := false
        entry_price := na
        sl_price := na
        tp_price := na
        line.delete(entry_line)
        line.delete(sl_line)
        line.delete(tp_line)

// ====== Display Statistics ======
var table stats = table.new(position = position.top_right, columns = 4, rows = 2, bgcolor = color.new(color.gray, 90), border_width = 1)

if barstate.islast
    total_trades = win_count + lose_count
    win_rate = total_trades > 0 ? win_count * 100.0 / total_trades : 0

    // Table Headers
    table.cell(stats, column = 0, row = 0, text = 'Total Trades', bgcolor = color.new(color.blue, 80), text_color = color.white, text_size = size.small, text_halign = text.align_center)
    table.cell(stats, column = 1, row = 0, text = 'Win Rate', bgcolor = color.new(color.blue, 80), text_color = color.white, text_size = size.small, text_halign = text.align_center)
    table.cell(stats, column = 2, row = 0, text = 'W/L', bgcolor = color.new(color.blue, 80), text_color = color.white, text_size = size.small, text_halign = text.align_center)
    table.cell(stats, column = 3, row = 0, text = 'TP Prob', bgcolor = color.new(color.blue, 80), text_color = color.white, text_size = size.small, text_halign = text.align_center)

    // Table Data
    table.cell(stats, column = 0, row = 1, text = str.tostring(total_trades), bgcolor = color.new(color.gray, 70), text_color = color.white, text_size = size.small, text_halign = text.align_center)
    table.cell(stats, column = 1, row = 1, text = str.tostring(win_rate, '#.##') + '%', bgcolor = win_rate >= 50 ? color.new(color.green, 70) : color.new(color.red, 70), text_color = color.white, text_size = size.small, text_halign = text.align_center)
    table.cell(stats, column = 2, row = 1, text = str.tostring(win_count) + '/' + str.tostring(lose_count), bgcolor = color.new(color.gray, 70), text_color = color.white, text_size = size.small, text_halign = text.align_center)
    table.cell(stats, column = 3, row = 1, text = str.tostring(latest_probability_tp_hit, '#.##') + '%', bgcolor = latest_probability_tp_hit >= 50 ? color.new(color.green, 70) : color.new(color.red, 70), text_color = color.white, text_size = size.small, text_halign = text.align_center)
